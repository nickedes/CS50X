//solution of pset4
//
// breakout.c
//
// Computer Science 50
// Problem Set 4
//standard libararies
#include<stdio.h>
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Stanford Portable Library
#include "gevents.h"
#include "gobjects.h"
#include "gwindow.h"

// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400

// number of rows of bricks
#define ROWS 5

// number of columns of bricks
#define COLS 10

// radius of ball in pixels
#define RADIUS 10

// lives
#define LIVES 3
// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);

int main(void)
{
    // seed pseudorandom number generator
    srand48(time(NULL));
    
    int ctr=0;
    string gtype;
    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);

    // instantiate bricks
initBricks(window);

    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);

    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);

    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);

    // number of bricks initially
    int bricks = COLS * ROWS;

    // number of lives initially
    int lives = LIVES;

    // number of points initially
    int points = 0;
    
    int chk=0;
    
    double velocity = 4.0;
    double vely = -4.0;
    // keep playing until game over
    // TODO
    
    while(lives > 0 && bricks > 0)
    {
        // check for mouse event
        GEvent event=getNextEvent(MOUSE_EVENT);    
        
        // if we heard one
        if (event != NULL)
        {
            //if the event was movement
            if (getEventType(event) == MOUSE_CLICKED)
            {       
                // print click's coordinates
                printf("%.0f,%.0f\n", getX(event), getY(event));   
                chk=1;
                pause(15);
            }    
                
            if(chk==1)
            {    
                pause(5);
                // check for mouse event
                GEvent event1 = getNextEvent(MOUSE_EVENT);
                // if we heard one
                if (event1 != NULL)
                {
                    // if the event was movement
                    if (getEventType(event1) == MOUSE_MOVED)
                    {
                        // ensure circle follows top cursor
                        double x = getX(event1);
                        if(x<=365)
                            setLocation(paddle, x, 550);
                         // move circle along x-axis
                    }
                }
                pause(10);
                                
                 
                GObject object = detectCollision(window, ball);
                // bounce off right edge of window
                if (getX(ball) + getWidth(ball) >= getWidth(window))
                {
                    velocity = -velocity;
                    move(ball, velocity, vely);

                }
                // bounce off left edge of window
                else if (getX(ball) <= 0)
                {

                    velocity = -velocity;
                    move(ball, velocity, vely);

                }
               else if(getY(ball)<=0)
                {
                    vely = -vely;
                    move(ball, velocity, vely);

                }
                else if(getY(ball) +getHeight(ball) >= getHeight(window))
                {
                    //vely = -vely;   
                    
                    lives--;
                    chk=0;
                    move(ball, velocity, vely);
                    removeGWindow(window,ball);
                    ball = initBall(window);
                }
                else if (object == paddle)
                {
                    vely= -vely;
                    move(ball, velocity, vely);
                    
                }
                else if(object !=NULL && !strcmp(getType(object),"GRect"))
                {
                        // TODO

                    removeGWindow(window,object);
                    vely = -vely;
                    --bricks;
                    updateScoreboard(window, label,++points);
                    move(ball, velocity, vely);
                    
                
                }
 
                // linger before moving again
                else
                {
                move(ball, velocity, vely);
                }          
                
                pause(10);
            }
        }
    }
      
    // wait for click before exiting
    waitForClick();

    // game over
    closeGWindow(window);
    return 0;
}

    
/**
 * Initializes window with a grid of bricks.
 */
void initBricks(GWindow window)
{
    // TODO
    int i,j,k=0,l=20;
    for(i=0;i<ROWS;i++)
    {
        for(j=0;j<COLS;j++)
        {
            GRect rect = newGRect(k, l, 35, 10);
            setFilled(rect, true);
            if(i==0)
            {
                setColor(rect, "RED");
            }
            else if(i==1)
            {
                setColor(rect, "ORANGE");   
            }
            else if(i==2)
            {
                setColor(rect, "YELLOW");
            }
            else if(i==3)
            {
                setColor(rect, "GREEN");
            }
            else
            {
                setColor(rect, "CYAN");
            }
            add(window, rect);
            k=k+40;
        }
        k=0;
        l=l+26;
   }
   
}

/**
 * Instantiates ball in center of window.  Returns ball.
 */
GOval initBall(GWindow window)
{
    // TODO
    GOval circle = newGOval(200, 300, 10, 10);
    setFilled(circle, true);
    setColor(circle, "BLACK");
    add(window, circle);
    return circle;
}

/**
 * Instantiates paddle in bottom-middle of window.
 */
GRect initPaddle(GWindow window)
{
    // TODO
    GRect rect = newGRect(200, 550, 35, 10);
    setFilled(rect, true);
    setColor(rect, "BLACK");
    add(window,rect);
    return rect;
}

/**
 * Instantiates, configures, and returns label for scoreboard.
 */
GLabel initScoreboard(GWindow window)
{
    // TODO
    GLabel label = newGLabel("");
    setFont(label, "SansSerif-36");
    add(window, label);
    return label;
}

/**
 * Updates scoreboard's label, keeping it centered in window.
 */
void updateScoreboard(GWindow window, GLabel label, int points)
{
    // update label
    char s[12];
    sprintf(s, "%i", points);
    setLabel(label, s);

    // center label in window
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
}

/**
 * Detects whether ball has collided with some object in window
 * by checking the four corners of its bounding box (which are
 * outside the ball's GOval, and so the ball can't collide with
 * itself).  Returns object if so, else NULL.
 */
GObject detectCollision(GWindow window, GOval ball)
{
    // ball's location
    double x = getX(ball);
    double y = getY(ball);

    // for checking for collisions
    GObject object;

    // check for collision at ball's top-left corner
    object = getGObjectAt(window, x, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's top-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-left corner
    object = getGObjectAt(window, x, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // no collision
    return NULL;
}


