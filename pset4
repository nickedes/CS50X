//solution of pset4
//
// breakout.c
//
// Computer Science 50
// Problem Set 4
//standard libararies
#include<stdio.h>
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Stanford Portable Library
#include "gevents.h"
#include "gobjects.h"
#include "gwindow.h"

// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400

// number of rows of bricks
#define ROWS 5

// number of columns of bricks
#define COLS 10

// radius of ball in pixels
#define RADIUS 10

// lives
#define LIVES 3
// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);

int main(void)
{
    // seed pseudorandom number generator
    srand48(time(NULL));
    
    int ctr=0;
    string gtype;
    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);

    // instantiate bricks
initBricks(window);

    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);

    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);

    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);

    // number of bricks initially
    int bricks = COLS * ROWS;

    // number of lives initially
    int lives = LIVES;

    // number of points initially
    int points = 0;
    
    int chk=0;
    
    double velocity = 4.0;
    double vely = -4.0;
    // keep playing until game over
    // TODO
    
    while(lives > 0 && bricks > 0)
    {
        // check for mouse event
        GEvent event=getNextEvent(MOUSE_EVENT);    
        
        // if we heard one
        if (event != NULL)
        {
            //if the event was movement
            if (getEventType(event) == MOUSE_CLICKED)
            {       
                // print click's coordinates
                printf("%.0f,%.0f\n", getX(event), getY(event));   
                chk=1;
                pause(15);
            }    
                
            if(chk==1)
            {    
                pause(5);
                // check for mouse event
                GEvent event1 = getNextEvent(MOUSE_EVENT);
                // if we heard one
                if (event1 != NULL)
                {
                    // if the event was movement
                    if (getEventType(event1) == MOUSE_MOVED)
                    {
                        // ensure circle follows top cursor
                        double x = getX(event1);
                        if(x<=365)
                            setLocation(paddle, x, 550);
                         // move circle along x-axis
                    }
                }
                pause(10);
                                
                 
                GObject object = detectCollision(window, ball);
                // bounce off right edge of window
                if (getX(ball) + getWidth(ball) >= getWidth(window))
                {
                    velocity = -velocity;
                    move(ball, velocity, vely);

                }
                // bounce off left edge of window
                else if (getX(ball) <= 0)
                {

                    velocity = -velocity;
                    move(ball, velocity, vely);

                }
               else if(getY(ball)<=0)
                {
                    vely = -vely;
                    move(ball, velocity, vely);

                }
                else if(getY(ball) +getHeight(ball) >= getHeight(window))
                {
                    //vely = -vely;   
                    
                    lives--;
                    chk=0;
                    move(ball, velocity, vely);
                    removeGWindow(window,ball);
                    ball = initBall(window);
                }
                else if (object == paddle)
                {
                    vely= -vely;
                    move(ball, velocity, vely);
                    
                }
                else if(object !=NULL && !strcmp(getType(object),"GRect"))
                {
                        // TODO


